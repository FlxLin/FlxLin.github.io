<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue几种传参方式</title>
    <url>/2020/02/20/Vue%E5%87%A0%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Vue常见的传参方式"><a href="#Vue常见的传参方式" class="headerlink" title="Vue常见的传参方式"></a>Vue常见的传参方式</h2><ul>
<li>URL传参</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由定义</span></span><br><span class="line">&#123;<span class="attr">path</span>:<span class="string">'/cms/page/edit/:pageId'</span>,<span class="attr">name</span>:<span class="string">'修改页面'</span>,<span class="attr">component</span>: Page_edit,<span class="attr">hidden</span>:<span class="literal">true</span>&#125;</span><br><span class="line"><span class="comment">//：+ 参数名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">          path:<span class="string">'/cms/page/edit/'</span> + pageId</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用query传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接使用vue自带的to</span></span><br><span class="line">&lt;router-link <span class="class"><span class="keyword">class</span></span>=<span class="string">"mui-tab-item"</span> :to=<span class="string">"&#123;path:'/cms/page/add/' , query:&#123;</span></span><br><span class="line"><span class="string">    page: this.params.page,</span></span><br><span class="line"><span class="string">    siteId: this.params.siteId</span></span><br><span class="line"><span class="string">&#125;&#125;"</span> &gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取出参数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取出url里面的参数</span></span><br><span class="line"> <span class="keyword">this</span>.$router.push(&#123;<span class="comment">//跳转到地址/cms/page/list</span></span><br><span class="line">          path:<span class="string">'/cms/page/list'</span>,</span><br><span class="line">          query:&#123;<span class="comment">//取出路由里的参数，并且作为path的参数传递</span></span><br><span class="line">            page : <span class="keyword">this</span>.$route.query.page,</span><br><span class="line">            siteId : <span class="keyword">this</span>.$route.query.siteId</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出query参数</span></span><br><span class="line">  created() &#123;</span><br><span class="line">      <span class="comment">//vue实例创建完，调用</span></span><br><span class="line">      <span class="keyword">this</span>.params.page = <span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.$route.query.page || <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">this</span>.params.siteId = <span class="keyword">this</span>.$route.query.siteId || <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域问题</title>
    <url>/2020/02/18/proxyTable%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="跨域问题报错"><a href="#跨域问题报错" class="headerlink" title="跨域问题报错"></a>跨域问题报错</h2><p><em>No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</em></p>
<ul>
<li>原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。</li>
<li>解决：采用proxyTable解决。</li>
</ul>
<h2 id="proxyTable是什么？"><a href="#proxyTable是什么？" class="headerlink" title="proxyTable是什么？"></a>proxyTable是什么？</h2><p><em>vue-cli提供的解决vue开发环境下跨域问题的方法，proxyTable的底层使用了http-proxymiddleware（<a href="https://github.com/chimurai/http-proxy-middleware）" target="_blank" rel="noopener">https://github.com/chimurai/http-proxy-middleware）</a> ，它是http代理中间件，它依赖node.js， 基本原理是用服务端代理解决浏览器跨域：</em></p>
<a id="more"></a>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">// Template version: 1.2.4</span></span><br><span class="line"><span class="comment">// see http://vuejs-templates.github.io/webpack for documentation.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> proxyConfig = <span class="built_in">require</span>(<span class="string">'./proxyConfig'</span>)</span><br><span class="line"><span class="keyword">let</span> sysConfig = <span class="built_in">require</span>(<span class="string">'./sysConfig'</span>)</span><br><span class="line"><span class="keyword">let</span> xcApiUrl = sysConfig.xcApiUrl</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Paths</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line">    <span class="comment">//proxyTable: proxyConfig.proxyList,</span></span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      <span class="string">'/api/cms'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://localhost:31001'</span>,<span class="comment">//转发地址</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span><span class="comment">//将api去除</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//target: 'http://127.0.0.1:50201'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-dev-server</title>
    <url>/2020/02/16/webpack-dev-server/</url>
    <content><![CDATA[<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p><em>webpack-dev-server开发服务器，它的功能可以实现热加载 并且自动刷新浏览器</em></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>npm install webpack@3.6.0 webpack-dev-server@2.9.1 html-webpack-plugin@2.30.1 --save-dev </code></pre><a id="more"></a>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --inline --hot --open --port 5008"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^2.30.1"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^3.6.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^2.9.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用html-webpack-plugin插件，作用是根据html模板在内存生成html文件，它的工作原理是根据模板文件在内存中生成一个index.html文件。</span></span><br><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> htmlwp = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:<span class="string">'./src/main.js'</span>,  <span class="comment">//指定打包的入口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        path : __dirname+<span class="string">'/dist'</span>,  <span class="comment">// 注意：__dirname表示webpack.config.js所在目录的绝对路径</span></span><br><span class="line">        filename:<span class="string">'build.js'</span>		   <span class="comment">//输出文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> htmlwp(&#123;</span><br><span class="line">            title: <span class="string">'首页'</span>,  <span class="comment">//生成的页面标题&lt;head&gt;&lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line">            filename: <span class="string">'index.html'</span>, <span class="comment">//webpack-dev-server在内存中生成的文件名称，自动将build注入到这个页面底部，才能实现自动刷新功能</span></span><br><span class="line">            template: <span class="string">'vue_test01.html'</span> <span class="comment">//根据vue_test01.html这个模板来生成(这个文件请程序员自己生成)</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre><code>//在项目根目录下执行
npm run dev </code></pre><h2 id="debug调试"><a href="#debug调试" class="headerlink" title="debug调试"></a>debug调试</h2><ul>
<li>在webpack.conﬁg.js中配置：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devtool: <span class="string">'eval‐source‐map'</span>,</span><br></pre></td></tr></table></figure></li>
<li>在js中跟踪代码的位置上添加debugger</li>
</ul>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack实践</title>
    <url>/2020/02/16/webpack%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="Webpack介绍"><a href="#Webpack介绍" class="headerlink" title="Webpack介绍"></a>Webpack介绍</h2><p><em>Webpack 是一个前端资源的打包工具，它可以将js、image、css等资源当成一个模块进行打包。</em></p>
<p>功能：</p>
<ul>
<li>模块化开发<br>程序员在开发时可以分模块创建不同的js、 css等小文件方便开发，最后使用webpack将这些小文件打包成一个文 件，减少了http的请求次数。 webpack可以实现按需打包，为了避免出现打包文件过大可以打包成多个文件。</li>
<li>编译typescript、ES6等高级js语法<br>随着前端技术的强大，开发中可以使用javascript的很多高级版本，比如：typescript、ES6等，方便开发， webpack可以将打包文件转换成浏览器可识别的js语法。 </li>
<li>CSS预编译<br>webpack允许在开发中使用Sass 和 Less等原生CSS的扩展技术，通过sass-loader、less-loader将Sass 和 Less的 语法编译成浏览器可识别的css语法</li>
</ul>
<a id="more"></a>

<h2 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num1"</span>&gt;</span>+</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num2"</span>&gt;</span>=</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"change"</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Js代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//add.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.add = add</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> &#123;add&#125; =<span class="built_in">require</span>(<span class="string">"./add.js"</span>)</span><br><span class="line"><span class="keyword">var</span> Vue =<span class="built_in">require</span>(<span class="string">"./vue.min.js"</span>)</span><br><span class="line"><span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name:<span class="string">'vue.js测试用例'</span>,</span><br><span class="line">        num1:<span class="number">0</span>,</span><br><span class="line">        num2:<span class="number">0</span>,</span><br><span class="line">        result:<span class="number">0</span>,</span><br><span class="line">        url:<span class="string">"https://www.google.com.tw/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        change:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.result = add(<span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.num1) ,<span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.num2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><em>html中的build.js是webpack打包生成的，在终端下运行：</em></p>
<pre><code>webpack main.js build.js</code></pre>]]></content>
      <tags>
        <tag>Wehpack</tag>
      </tags>
  </entry>
  <entry>
    <title>vue.js入门</title>
    <url>/2020/02/16/vue-js%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="Vue是什么？"><a href="#Vue是什么？" class="headerlink" title="Vue是什么？"></a>Vue是什么？</h2><p><em>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计 为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一 方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 渐进式框架：Progressive，说明vue.js的轻量，是指一个前端项目可以使用vue.js一两个特性也可以整个项目都用 vue.js。<br>自底向上逐层应用：作为渐进式框架要实现的目标就是方便项目增量开发。</em></p>
<a id="more"></a>

<h2 id="vue-js有哪些功能？"><a href="#vue-js有哪些功能？" class="headerlink" title="vue.js有哪些功能？"></a>vue.js有哪些功能？</h2><ul>
<li>声明式渲染<br>  Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统。 比如：使用vue.js的插值表达式放在Dom的任意地方， 差值表达式的值将被渲染在Dom中。</li>
<li>条件与循环<br>  dom中可以使用vue.js提供的v-if、v-for等标签，方便对数据进行判断、循环。</li>
<li>双向数据绑定<br>  Vue 提供v-model 指令，它可以轻松实现Dom元素和数据对象之间双向绑定，即修改Dom元素中的值自动修改绑 定的数据对象，修改数据对象的值自动修改Dom元素中的值。 </li>
<li>处理用户输入<br>  为了让用户和你的应用进行交互，我们可以用 v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法。</li>
<li>组件化应用构建 vue.js可以定义一个一个的组件，在vue页面中引用组件，这个功能非常适合构建大型应用。</li>
</ul>
<h2 id="Vue入门程序"><a href="#Vue入门程序" class="headerlink" title="Vue入门程序"></a>Vue入门程序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;vue测试页面&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;a v-bind:href=<span class="string">"url"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" v-model="num1"&gt;+</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" v-model="num2"&gt;=</span></span><br><span class="line"><span class="regexp">    &lt;span v-text="result"&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">"change"</span>&gt;计算&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="vue.min.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#app"</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name:<span class="string">'vue.js测试用例'</span>,</span><br><span class="line">            num1:<span class="number">0</span>,</span><br><span class="line">            num2:<span class="number">0</span>,</span><br><span class="line">            result:<span class="number">0</span>,</span><br><span class="line">            url:<span class="string">"https://www.google.com.tw/"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            change:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.result = <span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.num1) + <span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.num2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Python配合ffmpeg爬取视频</title>
    <url>/2020/02/09/Python%E9%85%8D%E5%90%88ffmpeg%E7%88%AC%E5%8F%96%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p><em>主要采用python配合ffmpeg对一些视频进行爬取，需要配置ffmpeg才能运行。</em></p>
<h2 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h2><a id="more"></a>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = input(<span class="string">"请输入你要解析的网址："</span>)</span><br><span class="line">url = <span class="string">"http://jx.618g.com/?url="</span> + url</span><br><span class="line"></span><br><span class="line">response = requests.get(url).text</span><br><span class="line">begin = response.find(<span class="string">"m3u8-dp.php?url="</span>) + len(<span class="string">"m3u8-dp.php?url="</span>)</span><br><span class="line">end = response.find(<span class="string">"index.m3u8"</span>) + len(<span class="string">"index.m3u8"</span>)</span><br><span class="line">print(begin, end)</span><br><span class="line"><span class="keyword">if</span> begin == len(<span class="string">"m3u8-dp.php?url="</span>) - <span class="number">1</span> <span class="keyword">or</span> end == len(<span class="string">"index.m3u8"</span>) - <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"对不起，该地址无法解析！！！"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"解析成功！！请在终端下运行下列代码：\n&#123;&#125;"</span>.format(<span class="string">"ffmpeg -i'&#123;&#125;' -vcode copy -acode copy xxx.mp4"</span>.format(response[begin:end])))</span><br></pre></td></tr></table></figure>

<h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i&#39;网址&#39; -vcode copy -acode copy xxx.mp4</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>有道翻译--爬虫</title>
    <url>/2020/02/05/%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91-%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p><em>使用requests, json实现的的一个简单的爬虫，爬取了有道翻译，可实现自动翻译的功能。</em></p>
<a id="more"></a>

<h2 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule"</span></span><br><span class="line">    text = input(<span class="string">"请输入你要翻译的类容："</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"i"</span>: text,</span><br><span class="line">        <span class="string">"from"</span>: <span class="string">"AUTO"</span>,</span><br><span class="line">        <span class="string">"to"</span>: <span class="string">"AUTO"</span>,</span><br><span class="line">        <span class="string">"smartresult"</span>: <span class="string">"dict"</span>,</span><br><span class="line">        <span class="string">"client"</span>: <span class="string">"fanyideskweb"</span>,</span><br><span class="line">        <span class="string">"salt"</span>: <span class="string">"15808669778406"</span>,</span><br><span class="line">        <span class="string">"sign"</span>: <span class="string">"cf9cad98bb3652ac19586c171eadc06e"</span>,</span><br><span class="line">        <span class="string">"ts"</span>: <span class="string">"1580866977840"</span>,</span><br><span class="line">        <span class="string">"bv"</span>: <span class="string">"901200199a98c590144a961dac532964"</span>,</span><br><span class="line">        <span class="string">"doctype"</span>: <span class="string">"json"</span>,</span><br><span class="line">        <span class="string">"version"</span>: <span class="string">"2.1"</span>,</span><br><span class="line">        <span class="string">"keyfrom"</span>: <span class="string">"fanyi.web"</span>,</span><br><span class="line">        <span class="string">"action"</span>: <span class="string">"FY_BY_REALTlME"</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = json.loads(requests.post(url, data, headers).text)</span><br><span class="line">    print(response[<span class="string">"translateResult"</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">"tgt"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       translate()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Pyhton</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现简单的通信协议</title>
    <url>/2020/02/01/Python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p><em>使用socket实现的的一个简单的自定义协议，模拟实现了QQ的小部分功能。其中涉及到json的使用，以及多线程的创建等等。</em></p>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul>
<li>多用户连接</li>
<li>即时通讯</li>
<li>登陆，退出</li>
<li>历史消息</li>
</ul>
<a id="more"></a>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect((<span class="string">"192.168.0.101"</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">user = <span class="string">"Linn"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆</span></span><br><span class="line">login_template = &#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"login"</span>,</span><br><span class="line">    <span class="string">"user"</span>: user</span><br><span class="line">&#125;</span><br><span class="line">client.send(json.dumps(login_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取在线用户</span></span><br><span class="line">get_user_template = &#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"list_user"</span></span><br><span class="line">&#125;</span><br><span class="line">client.send(json.dumps(get_user_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(<span class="string">"当前在线用户：&#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取历史消息</span></span><br><span class="line">offline_msg_template =&#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"history_msg"</span>,</span><br><span class="line">    <span class="string">"user"</span>: user,</span><br><span class="line">&#125;</span><br><span class="line">client.send(json.dumps(offline_msg_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(<span class="string">"历史消息：&#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line"></span><br><span class="line">Exit = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_send</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 随时能收到消息， 随时能发送消息</span></span><br><span class="line">        op_type = input(<span class="string">"请你选择你需要的操作：1.发送消息 2.退出 3.获取在线用户:  "</span>)</span><br><span class="line">        <span class="keyword">if</span> op_type <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>] :</span><br><span class="line">            print(<span class="string">"不支持该操作！！！"</span>)</span><br><span class="line">            <span class="comment"># op_type = input("请你选择你需要的操作：1.发送消息 2.推出 3.获取在线用户")</span></span><br><span class="line">        <span class="keyword">elif</span> op_type == <span class="string">"1"</span>:</span><br><span class="line">            to_user = input(<span class="string">"请输入你要发送消息的用户:  "</span>)</span><br><span class="line">            msg = input(<span class="string">"请输入你要发送的消息:  "</span>)</span><br><span class="line">            send_data_template = &#123;</span><br><span class="line">                <span class="string">"action"</span> : <span class="string">"send_msg"</span>,</span><br><span class="line">                <span class="string">"to"</span>: to_user,</span><br><span class="line">                <span class="string">"from"</span>: user,</span><br><span class="line">                <span class="string">"data"</span>: msg</span><br><span class="line">            &#125;</span><br><span class="line">            client.send(json.dumps(send_data_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> op_type == <span class="string">"2"</span>:</span><br><span class="line">            exit_template = &#123;</span><br><span class="line">                <span class="string">"action"</span>: <span class="string">"list_user"</span>,</span><br><span class="line">                <span class="string">"user"</span>: user</span><br><span class="line">            &#125;</span><br><span class="line">            client.send(json.dumps(exit_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">            Exit = <span class="literal">True</span></span><br><span class="line">            client.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> op_type == <span class="string">"3"</span>:</span><br><span class="line">            get_user_template = &#123;</span><br><span class="line">                <span class="string">"action"</span>: <span class="string">"list_user"</span></span><br><span class="line">            &#125;</span><br><span class="line">            client.send(json.dumps(get_user_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_recv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 处理接收请求</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Exit:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            res_json = json.loads(res)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                msg = res_json[<span class="string">"data"</span>]</span><br><span class="line">                from_user = res_json[<span class="string">"from"</span>]</span><br><span class="line">                print(<span class="string">"\n收到来自&#123;&#125;得消息：&#123;&#125;"</span>.format(from_user, msg))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">""</span>)</span><br><span class="line">                print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    threading.Thread(target=handle_recv).start()</span><br><span class="line">    threading.Thread(target=handle_send).start()</span><br></pre></td></tr></table></figure>

<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 维护用户连接</span></span><br><span class="line">online_user = defaultdict(dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 维护用户历史消息</span></span><br><span class="line">user_msg = defaultdict(list)</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定ip，端口</span></span><br><span class="line">server.bind((<span class="string">'0.0.0.0'</span>, <span class="number">8000</span>))</span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hand_socket</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        json_data = json.loads(data.decode(<span class="string">"utf8"</span>))</span><br><span class="line">        action = json_data.get(<span class="string">"action"</span>, <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">"login"</span>:</span><br><span class="line">            online_user[json_data[<span class="string">"user"</span>]] = sock</span><br><span class="line">            sock.send(<span class="string">"登陆成功！"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"list_user"</span>:</span><br><span class="line">            <span class="comment"># 获取当前用户</span></span><br><span class="line">            all_users = [user <span class="keyword">for</span> user, sock <span class="keyword">in</span> online_user.items()]</span><br><span class="line">            sock.send(json.dumps(all_users).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"history_msg"</span>:</span><br><span class="line">            sock.send(json.dumps(user_msg.get(json_data[<span class="string">"user"</span>], [])).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"send_msg"</span>:</span><br><span class="line">            <span class="keyword">if</span> json_data[<span class="string">"to"</span>] <span class="keyword">in</span> online_user:</span><br><span class="line">                online_user[json_data[<span class="string">"to"</span>]].send(json.dumps(json_data).encode(<span class="string">"utf8"</span>))</span><br><span class="line">            user_msg[json_data[<span class="string">"to"</span>]].append(json_data)</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"exits"</span>:</span><br><span class="line">            <span class="keyword">del</span> online_user[json_data[<span class="string">"user"</span>]]</span><br><span class="line">            sock.send(<span class="string">"退出成功!"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 阻塞等待连接</span></span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line">    <span class="comment"># 启动线程，用于用户连接</span></span><br><span class="line">    threading.Thread(target=hand_socket, args=(sock, addr)).start()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python关于socket编程</title>
    <url>/2020/01/29/Python%E5%85%B3%E4%BA%8Esocket%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p><em>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。采用python实现了简单了服务器与客户端的交互。</em></p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定区域网内都可以链接</span></span><br><span class="line">server.bind((<span class="string">'0.0.0.0'</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听</span></span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handl_sock</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    sock.send(<span class="string">"welcome to server!"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">    print(<span class="string">"Client request : &#123;&#125;"</span>.format(sock.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"Client request : &#123;&#125;"</span>.format(sock.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line">        input_data = input()</span><br><span class="line">        sock.send(input_data.encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 该方法会组赛等待</span></span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多线程，完成多链接</span></span><br><span class="line">    client_thread = threading.Thread(target=handl_sock, args=(sock, addr))</span><br><span class="line">    client_thread.start()</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器ip地址</span></span><br><span class="line">client.connect((<span class="string">'192.168.0.101'</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">client.send(<span class="string">"welcome to client"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(<span class="string">"Server response : &#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    input_data = input()</span><br><span class="line">    client.send(input_data.encode(<span class="string">"utf8"</span>))</span><br><span class="line">    print(<span class="string">"Server response : &#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2d-creator</title>
    <url>/2020/01/21/cocos2d-creator/</url>
    <content><![CDATA[<p><em>这是我近期学习cocos2d_creator的收获，主要是关于js脚本编写。</em></p>
<a id="more"></a>

<h2 id="场景切换"><a href="#场景切换" class="headerlink" title="场景切换"></a>场景切换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">scenesChangesMS</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            cc.director.loadScene(<span class="string">"main_scenes"</span>);<span class="comment">//场景切换函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.node.on(cc.Node.EventType.TOUCH_END,scenesChangesMS,<span class="keyword">this</span>);<span class="comment">//打开触摸事件监控,on方法会给my_func方法传递一个TONCH类型的参数</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="触摸事件监控"><a href="#触摸事件监控" class="headerlink" title="触摸事件监控"></a>触摸事件监控</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_func1</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"触摸开始！！！"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(t.getLocation());</span><br><span class="line">            <span class="comment">//this.node.off(cc.Node.EventType.TOUCH_START,my_func,this);//关闭触摸事件监控</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_func2</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"触摸移动！！！"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(t.getLocation());</span><br><span class="line">            <span class="keyword">this</span>.node.x += t.getDelta().x;</span><br><span class="line">            <span class="keyword">this</span>.node.y += t.getDelta().y;</span><br><span class="line">            <span class="comment">//t.stopPropagationImmediate();</span></span><br><span class="line">            <span class="comment">//this.node.off(cc.Node.EventType.TOUCH_START,my_func,this);//关闭触摸事件监控</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.node.on(cc.Node.EventType.TOUCH_START,my_func1,<span class="keyword">this</span>);<span class="comment">//打开触摸事件监控,on方法会给my_func方法传递一个TONCH类型的参数</span></span><br><span class="line">        <span class="keyword">this</span>.node.on(cc.Node.EventType.TOUCH_MOVE,my_func2,<span class="keyword">this</span>);<span class="comment">//打开触摸移动事件监控</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="键盘事件监控"><a href="#键盘事件监控" class="headerlink" title="键盘事件监控"></a>键盘事件监控</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN,my_KEY_DOWN,<span class="keyword">this</span>);</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP,my_KEY_UP,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.node.on(<span class="string">"user_page"</span>,my_page,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_page</span>(<span class="params">e</span>) </span>&#123;<span class="comment">//e为派送函数传递过来的 表形参</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"自定义事件触发"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.node.name);</span><br><span class="line">            <span class="built_in">console</span>.log(e.detail);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_KEY_DOWN</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(event.keyCode)&#123;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.space :</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"space"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.w :</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"w"</span>);</span><br><span class="line">                    <span class="keyword">this</span>.node.y += <span class="number">10</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.s :</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"s"</span>);</span><br><span class="line">                    <span class="keyword">this</span>.node.y -= <span class="number">10</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_KEY_UP</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(event.keyCode)&#123;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.space :</span><br><span class="line">                    <span class="comment">//this.node.emit("user_page",&#123;name : "张三" , sex : "男" &#125;);</span></span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> cc.Event.EventCustom(<span class="string">"user_page"</span>);</span><br><span class="line">                    e.detail = &#123;<span class="attr">name</span> : <span class="string">"张三"</span> , <span class="attr">sex</span> : <span class="string">"男"</span>&#125;;</span><br><span class="line">                    <span class="keyword">this</span>.node.dispatchEvent(e,<span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.w :</span><br><span class="line">                    <span class="comment">//this.node.emit("user_page",&#123;name : "李四" , sex : "男"&#125;);</span></span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> cc.Event.EventCustom(<span class="string">"user_page"</span>);</span><br><span class="line">                    e.detail = &#123;<span class="attr">name</span> : <span class="string">"李四"</span> , <span class="attr">sex</span> : <span class="string">"男"</span>&#125;;</span><br><span class="line">                    <span class="keyword">this</span>.node.dispatchEvent(e,<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.s :</span><br><span class="line">                    <span class="keyword">this</span>.node.emit(<span class="string">"user_page"</span>,&#123;<span class="attr">name</span> : <span class="string">"王五"</span> , <span class="attr">sex</span> : <span class="string">"男"</span>&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
