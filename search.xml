<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python实现简单的通信协议</title>
    <url>/2020/02/01/Python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p><em>使用socket实现的的一个简单的自定义协议，模拟实现了QQ的小部分功能。其中设计到json的使用，以及多线程的创建等等。</em></p>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul>
<li>多用户连接</li>
<li>即时通讯</li>
<li>登陆，退出</li>
<li>历史消息</li>
</ul>
<a id="more"></a>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect((<span class="string">"192.168.0.101"</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">user = <span class="string">"Linn"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆</span></span><br><span class="line">login_template = &#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"login"</span>,</span><br><span class="line">    <span class="string">"user"</span>: user</span><br><span class="line">&#125;</span><br><span class="line">client.send(json.dumps(login_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取在线用户</span></span><br><span class="line">get_user_template = &#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"list_user"</span></span><br><span class="line">&#125;</span><br><span class="line">client.send(json.dumps(get_user_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(<span class="string">"当前在线用户：&#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取历史消息</span></span><br><span class="line">offline_msg_template =&#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"history_msg"</span>,</span><br><span class="line">    <span class="string">"user"</span>: user,</span><br><span class="line">&#125;</span><br><span class="line">client.send(json.dumps(offline_msg_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(<span class="string">"历史消息：&#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line"></span><br><span class="line">Exit = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_send</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 随时能收到消息， 随时能发送消息</span></span><br><span class="line">        op_type = input(<span class="string">"请你选择你需要的操作：1.发送消息 2.退出 3.获取在线用户:  "</span>)</span><br><span class="line">        <span class="keyword">if</span> op_type <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>] :</span><br><span class="line">            print(<span class="string">"不支持该操作！！！"</span>)</span><br><span class="line">            <span class="comment"># op_type = input("请你选择你需要的操作：1.发送消息 2.推出 3.获取在线用户")</span></span><br><span class="line">        <span class="keyword">elif</span> op_type == <span class="string">"1"</span>:</span><br><span class="line">            to_user = input(<span class="string">"请输入你要发送消息的用户:  "</span>)</span><br><span class="line">            msg = input(<span class="string">"请输入你要发送的消息:  "</span>)</span><br><span class="line">            send_data_template = &#123;</span><br><span class="line">                <span class="string">"action"</span> : <span class="string">"send_msg"</span>,</span><br><span class="line">                <span class="string">"to"</span>: to_user,</span><br><span class="line">                <span class="string">"from"</span>: user,</span><br><span class="line">                <span class="string">"data"</span>: msg</span><br><span class="line">            &#125;</span><br><span class="line">            client.send(json.dumps(send_data_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> op_type == <span class="string">"2"</span>:</span><br><span class="line">            exit_template = &#123;</span><br><span class="line">                <span class="string">"action"</span>: <span class="string">"list_user"</span>,</span><br><span class="line">                <span class="string">"user"</span>: user</span><br><span class="line">            &#125;</span><br><span class="line">            client.send(json.dumps(exit_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">            Exit = <span class="literal">True</span></span><br><span class="line">            client.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> op_type == <span class="string">"3"</span>:</span><br><span class="line">            get_user_template = &#123;</span><br><span class="line">                <span class="string">"action"</span>: <span class="string">"list_user"</span></span><br><span class="line">            &#125;</span><br><span class="line">            client.send(json.dumps(get_user_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_recv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 处理接收请求</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Exit:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            res_json = json.loads(res)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                msg = res_json[<span class="string">"data"</span>]</span><br><span class="line">                from_user = res_json[<span class="string">"from"</span>]</span><br><span class="line">                print(<span class="string">"\n收到来自&#123;&#125;得消息：&#123;&#125;"</span>.format(from_user, msg))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">""</span>)</span><br><span class="line">                print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    threading.Thread(target=handle_recv).start()</span><br><span class="line">    threading.Thread(target=handle_send).start()</span><br></pre></td></tr></table></figure>

<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 维护用户连接</span></span><br><span class="line">online_user = defaultdict(dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 维护用户历史消息</span></span><br><span class="line">user_msg = defaultdict(list)</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定ip，端口</span></span><br><span class="line">server.bind((<span class="string">'0.0.0.0'</span>, <span class="number">8000</span>))</span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hand_socket</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        json_data = json.loads(data.decode(<span class="string">"utf8"</span>))</span><br><span class="line">        action = json_data.get(<span class="string">"action"</span>, <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">"login"</span>:</span><br><span class="line">            online_user[json_data[<span class="string">"user"</span>]] = sock</span><br><span class="line">            sock.send(<span class="string">"登陆成功！"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"list_user"</span>:</span><br><span class="line">            <span class="comment"># 获取当前用户</span></span><br><span class="line">            all_users = [user <span class="keyword">for</span> user, sock <span class="keyword">in</span> online_user.items()]</span><br><span class="line">            sock.send(json.dumps(all_users).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"history_msg"</span>:</span><br><span class="line">            sock.send(json.dumps(user_msg.get(json_data[<span class="string">"user"</span>], [])).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"send_msg"</span>:</span><br><span class="line">            <span class="keyword">if</span> json_data[<span class="string">"to"</span>] <span class="keyword">in</span> online_user:</span><br><span class="line">                online_user[json_data[<span class="string">"to"</span>]].send(json.dumps(json_data).encode(<span class="string">"utf8"</span>))</span><br><span class="line">            user_msg[json_data[<span class="string">"to"</span>]].append(json_data)</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"exits"</span>:</span><br><span class="line">            <span class="keyword">del</span> online_user[json_data[<span class="string">"user"</span>]]</span><br><span class="line">            sock.send(<span class="string">"退出成功!"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 阻塞等待连接</span></span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line">    <span class="comment"># 启动线程，用于用户连接</span></span><br><span class="line">    threading.Thread(target=hand_socket, args=(sock, addr)).start()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python, socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Python关于socket编程</title>
    <url>/2020/01/29/Python%E5%85%B3%E4%BA%8Esocket%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p><em>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。采用python实现了简单了服务器与客户端的交互。</em></p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定区域网内都可以链接</span></span><br><span class="line">server.bind((<span class="string">'0.0.0.0'</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听</span></span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handl_sock</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    sock.send(<span class="string">"welcome to server!"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">    print(<span class="string">"Client request : &#123;&#125;"</span>.format(sock.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"Client request : &#123;&#125;"</span>.format(sock.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line">        input_data = input()</span><br><span class="line">        sock.send(input_data.encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 该方法会组赛等待</span></span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多线程，完成多链接</span></span><br><span class="line">    client_thread = threading.Thread(target=handl_sock, args=(sock, addr))</span><br><span class="line">    client_thread.start()</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器ip地址</span></span><br><span class="line">client.connect((<span class="string">'192.168.0.101'</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">client.send(<span class="string">"welcome to client"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(<span class="string">"Server response : &#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    input_data = input()</span><br><span class="line">    client.send(input_data.encode(<span class="string">"utf8"</span>))</span><br><span class="line">    print(<span class="string">"Server response : &#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python, socket</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2d-creator</title>
    <url>/2020/01/21/2020-01-21-cocos2d-creator/</url>
    <content><![CDATA[<p><em>这是我近期学习cocos2d_creator的收获，主要是关于js脚本编写。</em></p>
<h2 id="场景切换"><a href="#场景切换" class="headerlink" title="场景切换"></a>场景切换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">scenesChangesMS</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            cc.director.loadScene(<span class="string">"main_scenes"</span>);<span class="comment">//场景切换函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.node.on(cc.Node.EventType.TOUCH_END,scenesChangesMS,<span class="keyword">this</span>);<span class="comment">//打开触摸事件监控,on方法会给my_func方法传递一个TONCH类型的参数</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="触摸事件监控"><a href="#触摸事件监控" class="headerlink" title="触摸事件监控"></a>触摸事件监控</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_func1</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"触摸开始！！！"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(t.getLocation());</span><br><span class="line">            <span class="comment">//this.node.off(cc.Node.EventType.TOUCH_START,my_func,this);//关闭触摸事件监控</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_func2</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"触摸移动！！！"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(t.getLocation());</span><br><span class="line">            <span class="keyword">this</span>.node.x += t.getDelta().x;</span><br><span class="line">            <span class="keyword">this</span>.node.y += t.getDelta().y;</span><br><span class="line">            <span class="comment">//t.stopPropagationImmediate();</span></span><br><span class="line">            <span class="comment">//this.node.off(cc.Node.EventType.TOUCH_START,my_func,this);//关闭触摸事件监控</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.node.on(cc.Node.EventType.TOUCH_START,my_func1,<span class="keyword">this</span>);<span class="comment">//打开触摸事件监控,on方法会给my_func方法传递一个TONCH类型的参数</span></span><br><span class="line">        <span class="keyword">this</span>.node.on(cc.Node.EventType.TOUCH_MOVE,my_func2,<span class="keyword">this</span>);<span class="comment">//打开触摸移动事件监控</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="键盘事件监控"><a href="#键盘事件监控" class="headerlink" title="键盘事件监控"></a>键盘事件监控</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN,my_KEY_DOWN,<span class="keyword">this</span>);</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP,my_KEY_UP,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.node.on(<span class="string">"user_page"</span>,my_page,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_page</span>(<span class="params">e</span>) </span>&#123;<span class="comment">//e为派送函数传递过来的 表形参</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"自定义事件触发"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.node.name);</span><br><span class="line">            <span class="built_in">console</span>.log(e.detail);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_KEY_DOWN</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(event.keyCode)&#123;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.space :</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"space"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.w :</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"w"</span>);</span><br><span class="line">                    <span class="keyword">this</span>.node.y += <span class="number">10</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.s :</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"s"</span>);</span><br><span class="line">                    <span class="keyword">this</span>.node.y -= <span class="number">10</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_KEY_UP</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(event.keyCode)&#123;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.space :</span><br><span class="line">                    <span class="comment">//this.node.emit("user_page",&#123;name : "张三" , sex : "男" &#125;);</span></span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> cc.Event.EventCustom(<span class="string">"user_page"</span>);</span><br><span class="line">                    e.detail = &#123;<span class="attr">name</span> : <span class="string">"张三"</span> , <span class="attr">sex</span> : <span class="string">"男"</span>&#125;;</span><br><span class="line">                    <span class="keyword">this</span>.node.dispatchEvent(e,<span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.w :</span><br><span class="line">                    <span class="comment">//this.node.emit("user_page",&#123;name : "李四" , sex : "男"&#125;);</span></span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> cc.Event.EventCustom(<span class="string">"user_page"</span>);</span><br><span class="line">                    e.detail = &#123;<span class="attr">name</span> : <span class="string">"李四"</span> , <span class="attr">sex</span> : <span class="string">"男"</span>&#125;;</span><br><span class="line">                    <span class="keyword">this</span>.node.dispatchEvent(e,<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.s :</span><br><span class="line">                    <span class="keyword">this</span>.node.emit(<span class="string">"user_page"</span>,&#123;<span class="attr">name</span> : <span class="string">"王五"</span> , <span class="attr">sex</span> : <span class="string">"男"</span>&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js , cocos2d-creator</tag>
      </tags>
  </entry>
</search>
