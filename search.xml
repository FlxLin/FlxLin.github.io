<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mybatis</title>
    <url>/2020/02/28/Mybatis/</url>
    <content><![CDATA[<h2 id="druid"><a href="#druid" class="headerlink" title="druid"></a>druid</h2><p>阿里巴巴提供的spring boot 整合druid包druid-spring-boot-starter管理连接池。</p>
<p><strong>配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">31200</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xc-service-manage-course</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/xc_course?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Hongkong</span> <span class="comment">#mysql 8版本以上要加这些参数，不然会报错</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span>  <span class="comment">#初始建立连接数量</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">5</span>  <span class="comment">#最小连接数量</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">20</span> <span class="comment">#最大连接数量</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">10000</span>  <span class="comment">#获取连接最大等待时间，毫秒</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">true</span> <span class="comment">#申请连接时检测连接是否有效</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span> <span class="comment">#归还连接时检测连接是否有效</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span> <span class="comment">#配置间隔检测连接是否有效的时间（单位是毫秒）</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span>  <span class="comment">#连接在连接池的最小生存时间（毫秒）</span></span><br><span class="line"><span class="attr">pagehelper:</span> <span class="comment">#分页查询插件</span></span><br><span class="line">  <span class="string">helper‐dialect:</span> <span class="string">mysql</span> <span class="comment">#指定数据库类型</span></span><br></pre></td></tr></table></figure>

<h2 id="pagehelper"><a href="#pagehelper" class="headerlink" title="pagehelper"></a>pagehelper</h2><p>PageHelper是mybatis的通用分页插件，通过mybatis的拦截器实现分页功能，拦截sql查询请求，添加分页语句，<br>最终实现分页查询功能。</p>
<p><strong>原理</strong><br>在调用dao的service方法中设置分页参数：PageHelper.startPage(page, size)，分页参数会设置在ThreadLocal中PageHelper在mybatis执行sql前进行拦截，从ThreadLocal取出分页参数，修改当前执行的sql语句，添加分页sql。最后执行添加了分页sql的sql语句，实现分页查询。</p>
<p><strong>配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper‐spring‐boot‐starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dao层</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseMapper</span> </span>&#123;</span><br><span class="line">   <span class="function">CourseBase <span class="title">findCourseBaseById</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">Page&lt;CourseInfo&gt; <span class="title">findCourseListPage</span><span class="params">(CourseListRequest courseListRequest)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--dao层的映射文件，使用mybatis--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.xuecheng.manage_course.dao.CourseMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findCourseBaseById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultType</span>=<span class="string">"com.xuecheng.framework.domain.course.CourseBase"</span>&gt;</span></span><br><span class="line">        select * from course_base where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findCourseListPage"</span> <span class="attr">parameterType</span>=<span class="string">"com.xuecheng.framework.domain.course.request.CourseListRequest"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultType</span>=<span class="string">"com.xuecheng.framework.domain.course.ext.CourseInfo"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            course_base.*,</span><br><span class="line">            (SELECT pic FROM course_pic WHERE courseid = course_base.id) pic</span><br><span class="line">        FROM</span><br><span class="line">            course_base</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务层调用PageHelper.startPage（）实现分页</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> QueryResponseResult <span class="title">findAllCourseInfo</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size, CourseListRequest courseListRequest)</span></span>&#123;</span><br><span class="line">        PageHelper.startPage(page,size);</span><br><span class="line">        Page&lt;CourseInfo&gt; courseListPage = courseMapper.findCourseListPage(courseListRequest);</span><br><span class="line">        QueryResult queryResult = <span class="keyword">new</span> QueryResult();</span><br><span class="line">        queryResult.setList(courseListPage.getResult());</span><br><span class="line">        queryResult.setTotal(courseListPage.getTotal());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryResponseResult(CommonCode.SUCCESS,queryResult);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring整合Rabbitmq</title>
    <url>/2020/02/25/Spring%E6%95%B4%E5%90%88Rabbitmq/</url>
    <content><![CDATA[<p><strong>配置依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p><strong>配置application.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">44000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">test‐rabbitmq‐producer</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtualHost:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p><strong>定义配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产者与消费者的配置类一致</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//相当于bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="string">"queue_inform_email"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_INFORM_SMS = <span class="string">"queue_inform_sms"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_TOPICS_INFORM=<span class="string">"exchange_topics_inform"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机</span></span><br><span class="line">    <span class="meta">@Bean</span>(EXCHANGE_TOPICS_INFORM)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">EXCHANGE_TOPICS_INFORM</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//durable(true) 持久化，重启mq， 交换机依旧存在</span></span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_TOPICS_INFORM).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span>(QUEUE_INFORM_EMAIL)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">QUEUE_INFORM_EMAIL</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_INFORM_EMAIL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(QUEUE_INFORM_SMS)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">QUEUE_INFORM_SMS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_INFORM_SMS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列绑定交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">BINDING_QUEUE_INFORM_EMAIL</span><span class="params">(@Qualifier(QUEUE_INFORM_EMAIL)</span> Queue queue,</span></span><br><span class="line"><span class="function">                                              @<span class="title">Qualifier</span><span class="params">(EXCHANGE_TOPICS_INFORM)</span> Exchange exchange)</span>&#123;</span><br><span class="line">        <span class="comment">//with(routingKey)</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(QUEUE_INFORM_EMAIL).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">BINDING_QUEUE_INFORM_SMS</span><span class="params">(@Qualifier(QUEUE_INFORM_SMS)</span> Queue queue,</span></span><br><span class="line"><span class="function">                                            @<span class="title">Qualifier</span><span class="params">(EXCHANGE_TOPICS_INFORM)</span> Exchange exchange)</span>&#123;</span><br><span class="line">        <span class="comment">//with(routingKey)</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(QUEUE_INFORM_SMS).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>生产者代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Producer_spring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRabbitmq</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String message = <span class="string">"Hello, Linn!"</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1.交换机名称</span></span><br><span class="line"><span class="comment">        * 2.routingKey</span></span><br><span class="line"><span class="comment">        * 3.message</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConfig.EXCHANGE_TOPICS_INFORM, RabbitmqConfig.QUEUE_INFORM_SMS, message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = &#123;RabbitmqConfig.QUEUE_INFORM_SMS&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive_message</span><span class="params">(Message message)</span></span>&#123;<span class="comment">//参数还可以有 channel 去到通道信息</span></span><br><span class="line">        System.out.println(<span class="string">"receive message is :"</span> + message.getBody());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列-RabbitMQ</title>
    <url>/2020/02/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-rabbitemq/</url>
    <content><![CDATA[<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>MQ全称为Message Queue，即消息队列， RabbitMQ是由erlang语言开发，基于AMQP（Advanced MessageQueue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。</p>
<p><strong>开发中消息队列通常有如下应用场景：</strong></p>
<ul>
<li>任务异步处理<br>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</li>
<li>应用程序解耦合<br>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</li>
</ul>
<a id="more"></a>

<p><strong>安装管理插件</strong></p>
<p>安装rabbitMQ的管理插件，方便在浏览器端管理RabbitMQ，管理员身份运行: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins.bat enable  rabbitmq_management</span><br></pre></td></tr></table></figure>
<p>进入浏览器，输入：<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a> </p>
<p><strong>配置依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.rabbitmq&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;amqp-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.3&lt;&#x2F;version&gt;&lt;!--此版本与spring boot 1.5.9版本匹配--&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p><strong>生产者代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">"hello,world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过链接工厂，创建新的链接</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//服务器ip地址</span></span><br><span class="line">        factory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">//端口,mq默认端口5672</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">        <span class="comment">//设置虚拟机</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//建立新的链接</span></span><br><span class="line">            Connection connection = factory.newConnection();</span><br><span class="line">            <span class="comment">//创建通道</span></span><br><span class="line">            Channel channel = connection.createChannel();</span><br><span class="line">            <span class="comment">//声明队列，如果队列在mq中没有就要创建</span></span><br><span class="line">            <span class="comment">//参数：String queues, boolean durable, boolean exclusive, boolean var4, Map&lt;String, Object&gt; arguments</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *1.queues : 队列名称</span></span><br><span class="line"><span class="comment">            *2.durable ：是否持久化，如果持久化，mq重启后队列依旧存在</span></span><br><span class="line"><span class="comment">            *3.exclusive : 是否独占链接，如果connect关闭，则自动删除。</span></span><br><span class="line"><span class="comment">            *4.autoDelete ：是否自动删除，exclusive 与autoDelete同时为true，可以创建临时队列</span></span><br><span class="line"><span class="comment">            *5.arguments : 可以设置一个队列的扩展参数</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            channel.queueDeclare(QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            <span class="comment">//参数：String exchange, String routingKey, BasicProperties props， byte[] body</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             *1.exchange : 交换机，如果不指定，则是mq默认交换机</span></span><br><span class="line"><span class="comment">             *2.routingKey ：路由Key，交换机更具路由Key来将消息转发到指定的队列,如果使用默认交换机，则rouingKey为队列名称</span></span><br><span class="line"><span class="comment">             *3.props : 消息属性</span></span><br><span class="line"><span class="comment">             *4.body ：消息类容</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            String message = <span class="string">"Hello, Linn !"</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>,QUEUE,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">            channel.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">"hello,world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过链接工厂，创建新的链接</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//服务器ip地址</span></span><br><span class="line">        factory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">//端口,mq默认端口5672</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">        <span class="comment">//设置虚拟机</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        <span class="comment">//建立新的链接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//建立新的链接</span></span><br><span class="line">            Connection connection = factory.newConnection();</span><br><span class="line">            <span class="comment">//创建通道</span></span><br><span class="line">            Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//声明队列，如果队列在mq中没有就要创建</span></span><br><span class="line">            <span class="comment">//参数：String queues, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             *1.queues : 队列名称</span></span><br><span class="line"><span class="comment">             *2.durable ：是否持久化，如果持久化，mq重启后队列依旧存在</span></span><br><span class="line"><span class="comment">             *3.exclusive : 是否独占链接，如果connect关闭，则自动删除。</span></span><br><span class="line"><span class="comment">             *4.autoDelete ：是否自动删除，exclusive 与autoDelete同时为true，可以创建临时队列</span></span><br><span class="line"><span class="comment">             *5.arguments : 可以设置一个队列的扩展参数</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            channel.queueDeclare(QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//实现消费方法</span></span><br><span class="line">            DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">                <span class="comment">//当接收到消息时候，此方法被调用</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * consumerTag: 消费者标签，可选项</span></span><br><span class="line"><span class="comment">                * envelope：信封，通过envelope</span></span><br><span class="line"><span class="comment">                *properties：消息属性</span></span><br><span class="line"><span class="comment">                * body：消息类容</span></span><br><span class="line"><span class="comment">                * */</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="comment">//交换机</span></span><br><span class="line">                    String exchange = envelope.getExchange();</span><br><span class="line">                    <span class="comment">//消息id，可用于确认消息已接收</span></span><br><span class="line">                    <span class="keyword">long</span> deliveryTag = envelope.getDeliveryTag();</span><br><span class="line">                    <span class="comment">//消息类容</span></span><br><span class="line">                    String message = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"receive : "</span> + message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//监听队列</span></span><br><span class="line">            <span class="comment">//参数：String queue, boolean autoAck, Consumer callback</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *1.queue: 队列名称</span></span><br><span class="line"><span class="comment">            * autoAck: 自定回复</span></span><br><span class="line"><span class="comment">            *callback: 消费方法，消费者接到消息时候要执行的方法</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            channel.basicConsume(QUEUE,<span class="keyword">true</span>,defaultConsumer);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>页面静态化实例</title>
    <url>/2020/02/23/%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><p><em>SpringMVC提供 RestTemplate请求http接口，RestTemplate的底层可以使用第三方的http客户端工具实现http 的请求，常用的http客户端工具有Apache HttpClient、OkHttpClient等</em></p>
<p><strong>配置依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.squareup.okhttp3&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;okhttp&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p><strong>配置启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span>  OkHttp3ClientHttpRequestFactory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//相当于bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.data.mongodb.database&#125;"</span>)<span class="comment">//指定数据库</span></span><br><span class="line">    String db;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GridFSBucket <span class="title">getGridFSBucket</span><span class="params">(MongoClient mongoClient)</span></span>&#123;</span><br><span class="line">        MongoDatabase database = mongoClient.getDatabase(db);</span><br><span class="line">        GridFSBucket bucket = GridFSBuckets.create(database);</span><br><span class="line">        <span class="keyword">return</span> bucket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: ServiceProject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Linn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-02-14 10:51</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CmsPageRepository cmsPageRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CmsConfigRepository cmsConfigRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CmsTemplateRepository cmsTemplateRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    GridFSBucket gridFSBucket;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    GridFsTemplate gridFsTemplate;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 页面静态化方法</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 1.静态化程序获取页面的DataUrl</span></span><br><span class="line"><span class="comment">    * 2.静态化程序远程请求DataUrl，获取数据模型（ RestTemplate 实现）</span></span><br><span class="line"><span class="comment">    * 3.静态化程序获取页面模板信息</span></span><br><span class="line"><span class="comment">    * 4.执行页面静态化</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPageHtml</span><span class="params">(String pageId)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取数据模型</span></span><br><span class="line">        Map modelData = getModelByPageId(pageId);</span><br><span class="line">        <span class="comment">//获取模板内容</span></span><br><span class="line">        String template = getTemplateByPageId(pageId);</span><br><span class="line">        <span class="comment">//执行页面静态化</span></span><br><span class="line">        String Html = generateHtml(template, modelData);</span><br><span class="line">        <span class="keyword">if</span>(Html == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ExceptionCast.cast(CmsCode.CMS_GENERATEHTML_HTMLISNULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据模型</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map <span class="title">getModelByPageId</span><span class="params">(String pageId)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取页面</span></span><br><span class="line">        CmsPage cmsPage = <span class="keyword">this</span>.getById(pageId);</span><br><span class="line">        <span class="keyword">if</span>(cmsPage == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ExceptionCast.cast(CmsCode.CMS_PAGE_NOTEXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cmsPage.getDataUrl() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ExceptionCast.cast(CmsCode.CMS_GENERATEHTML_DATAURLISNULL);</span><br><span class="line">        &#125;</span><br><span class="line">        ResponseEntity&lt;Map&gt; forEntity = restTemplate.getForEntity(cmsPage.getDataUrl(), Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map body = forEntity.getBody();</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取模板内容</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTemplateByPageId</span><span class="params">(String pageId)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取页面</span></span><br><span class="line">        CmsPage cmsPage = <span class="keyword">this</span>.getById(pageId);</span><br><span class="line">        <span class="keyword">if</span>(cmsPage == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ExceptionCast.cast(CmsCode.CMS_PAGE_NOTEXIST);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String templateId = cmsPage.getTemplateId();</span><br><span class="line">        <span class="keyword">if</span>(templateId == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ExceptionCast.cast(CmsCode.CMS_GENERATEHTML_TEMPLATEISNULL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到模板信息</span></span><br><span class="line">        Optional&lt;CmsTemplate&gt; optional = cmsTemplateRepository.findById(templateId);</span><br><span class="line">        <span class="keyword">if</span>(optional.isPresent())&#123;</span><br><span class="line">            CmsTemplate cmsTemplate = optional.get();</span><br><span class="line">            String fileId = cmsTemplate.getTemplateFileId();</span><br><span class="line">            <span class="comment">//根据id查询文件</span></span><br><span class="line">            GridFSFile gridFSFile =</span><br><span class="line">                    gridFsTemplate.findOne(Query.query(Criteria.where(<span class="string">"_id"</span>).is(fileId)));</span><br><span class="line">            <span class="comment">//打开下载流对象</span></span><br><span class="line">            GridFSDownloadStream gridFSDownloadStream =</span><br><span class="line">                    gridFSBucket.openDownloadStream(gridFSFile.getObjectId());</span><br><span class="line">            <span class="comment">//创建gridFsResource，用于获取流对象</span></span><br><span class="line">            GridFsResource gridFsResource = <span class="keyword">new</span> GridFsResource(gridFSFile,gridFSDownloadStream);</span><br><span class="line">            <span class="comment">//获取流中的数据</span></span><br><span class="line">            String content = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                content = IOUtils.toString(gridFsResource.getInputStream(), <span class="string">"utf8"</span>);</span><br><span class="line">                <span class="keyword">return</span> content;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行页面静态化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">generateHtml</span><span class="params">(String template,Map modelData)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建配置对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration(Configuration.getVersion());</span><br><span class="line">        <span class="comment">//创建模板加载器</span></span><br><span class="line">        StringTemplateLoader stringTemplateLoader = <span class="keyword">new</span> StringTemplateLoader();</span><br><span class="line">        stringTemplateLoader.putTemplate(<span class="string">"template"</span>,template);</span><br><span class="line">        <span class="comment">//向配置对象中添加模板加载器</span></span><br><span class="line">        configuration.setTemplateLoader(stringTemplateLoader);</span><br><span class="line">        <span class="comment">//获取模板</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Template templateContent = configuration.getTemplate(<span class="string">"template"</span>);</span><br><span class="line">            <span class="comment">//调用api，进行静态坏</span></span><br><span class="line">            String content = FreeMarkerTemplateUtils.processTemplateIntoString(templateContent, modelData);</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TemplateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义异常及捕获</title>
    <url>/2020/02/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%8F%8A%E6%8D%95%E8%8E%B7/</url>
    <content><![CDATA[<p><strong>系统对异常的处理使用统一的异常处理流程：</strong><br>1、自定义异常类型。<br>2、自定义错误代码及错误信息。<br>3、对于可预知的异常由程序员在代码中主动抛出，由SpringMVC统一捕获。<br>可预知异常是程序员在代码中手动抛出本系统定义的特定异常类型，由于是程序员抛出的异常，通常异常信息比较<br>齐全，程序员在抛出时会指定错误代码及错误信息，获取异常信息也比较方便。<br>4、对于不可预知的异常（运行时异常）由SpringMVC统一捕获Exception类型的异常。<br>不可预知异常通常是由于系统出现bug、或一些不要抗拒的错误（比如网络中断、服务器宕机等），异常类型为<br>RuntimeException类型（运行时异常）。<br>5、可预知的异常及不可预知的运行时异常最终会采用统一的信息格式（错误代码+错误信息）来表示，最终也会随<br>请求响应给客户端。</p>
<a id="more"></a>

<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CustomException.java</span></span><br><span class="line"><span class="comment">//继承RuntimeException是因为，对源代码没有侵入性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="comment">//错误代码,自定义错误提示信息</span></span><br><span class="line">    ResultCode resultCode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(ResultCode resultCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resultCode = resultCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultCode <span class="title">getResultCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ExceptionCast.java</span></span><br><span class="line"><span class="comment">//封装异常抛出</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionCast</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cast</span><span class="params">(ResultCode resultCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(resultCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ExceptionCatch.java</span></span><br><span class="line"><span class="comment">//统一异常捕获类</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span><span class="comment">//控制器增强</span></span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//返回json数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionCatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =  LoggerFactory.getLogger(ExceptionCatch<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//使用EXCEPTIONS存放异常类型和错误代码的映射，ImmutableMap的特点的一旦创建不可改变，并且线程安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ImmutableMap&lt;Class&lt;? extends Throwable&gt;,ResultCode&gt; EXCEPTIONS;</span><br><span class="line">    <span class="comment">//使用builder来构建一个异常类型和错误代码的异常</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> ImmutableMap.Builder&lt;Class&lt;? extends Throwable&gt;,ResultCode&gt; builder =</span><br><span class="line">            ImmutableMap.builder();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(CustomException<span class="class">.<span class="keyword">class</span>)//捕获<span class="title">CustomException</span>此类异常</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseResult</span> <span class="title">customException</span>(<span class="title">CustomException</span> <span class="title">customException</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        LOGGER.error(<span class="string">"catch exception : &#123;&#125;"</span>,customException.getMessage());</span><br><span class="line">        ResultCode resultCode = customException.getResultCode();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(resultCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)//捕获<span class="title">Exception</span>此类异常</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseResult</span> <span class="title">exception</span>(<span class="title">Exception</span> <span class="title">exception</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        LOGGER.error(<span class="string">"catch exception : &#123;&#125;"</span>,exception.getMessage());</span><br><span class="line">        <span class="keyword">if</span>(EXCEPTIONS == <span class="keyword">null</span>)</span><br><span class="line">            EXCEPTIONS = builder.build();</span><br><span class="line">        <span class="keyword">final</span> ResultCode resultCode = EXCEPTIONS.get(exception.getClass());</span><br><span class="line">        <span class="keyword">final</span> ResponseResult responseResult;</span><br><span class="line">        <span class="keyword">if</span> (resultCode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            responseResult = <span class="keyword">new</span> ResponseResult(resultCode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            responseResult = <span class="keyword">new</span> ResponseResult(CommonCode.SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> responseResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//在这里加入一些基础的异常类型判断</span></span><br><span class="line">        builder.put(HttpMessageNotReadableException<span class="class">.<span class="keyword">class</span>,<span class="title">CommonCode</span>.<span class="title">INVALID_PARAM</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>页面静态化</title>
    <url>/2020/02/21/%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96/</url>
    <content><![CDATA[<h2 id="页面静态化"><a href="#页面静态化" class="headerlink" title="页面静态化"></a>页面静态化</h2><p><em>模板+数据模型=输出，页面静态化需要准备数据模型和模板，先知道数据模型的结构才可以编写模板，因为在模板中要引用数据模型中的数据</em></p>
<ul>
<li>如何对页面进行静态化<br>一个页面等于模板加数据，在添加页面的时候我们选择了页面的模板。页面静态化就是将页面模板和数据通过技术手段将二者合二为一，生成一个html网页文件。</li>
</ul>
<h2 id="Freemarker"><a href="#Freemarker" class="headerlink" title="Freemarker"></a>Freemarker</h2><p>FreeMarker是一个基于Java的模板引擎，最初专注于使用MVC软件架构生成动态网页。freemarker并不关心数据的来源，只是根据模板的内容，将数据模型在模板中显示并输出文件（通常为html，也可以生成其它格式的文本文件）</p>
<a id="more"></a>

<p><strong>配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;导入依赖</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//不要使用Restcontroller（返回json数据）</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/freemarker"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreemarkerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//模板数据</span></span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"Linn"</span>);</span><br><span class="line">        <span class="comment">//返回freemarker模板的位置，基于resource/templates</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//test1,模板，文件后缀为 .ftl</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf‐8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello $&#123;name&#125;!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue几种传参方式</title>
    <url>/2020/02/20/Vue%E5%87%A0%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Vue常见的传参方式"><a href="#Vue常见的传参方式" class="headerlink" title="Vue常见的传参方式"></a>Vue常见的传参方式</h2><ul>
<li>URL传参</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由定义</span></span><br><span class="line">&#123;<span class="attr">path</span>:<span class="string">'/cms/page/edit/:pageId'</span>,<span class="attr">name</span>:<span class="string">'修改页面'</span>,<span class="attr">component</span>: Page_edit,<span class="attr">hidden</span>:<span class="literal">true</span>&#125;</span><br><span class="line"><span class="comment">//：+ 参数名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">          path:<span class="string">'/cms/page/edit/'</span> + pageId</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<ul>
<li><p>使用query传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接使用vue自带的to</span></span><br><span class="line">&lt;router-link <span class="class"><span class="keyword">class</span></span>=<span class="string">"mui-tab-item"</span> :to=<span class="string">"&#123;path:'/cms/page/add/' , query:&#123;</span></span><br><span class="line"><span class="string">    page: this.params.page,</span></span><br><span class="line"><span class="string">    siteId: this.params.siteId</span></span><br><span class="line"><span class="string">&#125;&#125;"</span> &gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取出参数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取出url里面的参数</span></span><br><span class="line"> <span class="keyword">this</span>.$router.push(&#123;<span class="comment">//跳转到地址/cms/page/list</span></span><br><span class="line">          path:<span class="string">'/cms/page/list'</span>,</span><br><span class="line">          query:&#123;<span class="comment">//取出路由里的参数，并且作为path的参数传递</span></span><br><span class="line">            page : <span class="keyword">this</span>.$route.query.page,</span><br><span class="line">            siteId : <span class="keyword">this</span>.$route.query.siteId</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出query参数</span></span><br><span class="line">  created() &#123;</span><br><span class="line">      <span class="comment">//vue实例创建完，调用</span></span><br><span class="line">      <span class="keyword">this</span>.params.page = <span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.$route.query.page || <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">this</span>.params.siteId = <span class="keyword">this</span>.$route.query.siteId || <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域问题</title>
    <url>/2020/02/18/proxyTable%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="跨域问题报错"><a href="#跨域问题报错" class="headerlink" title="跨域问题报错"></a>跨域问题报错</h2><p><em>No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</em></p>
<ul>
<li>原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。</li>
<li>解决：采用proxyTable解决。</li>
</ul>
<h2 id="proxyTable是什么？"><a href="#proxyTable是什么？" class="headerlink" title="proxyTable是什么？"></a>proxyTable是什么？</h2><p><em>vue-cli提供的解决vue开发环境下跨域问题的方法，proxyTable的底层使用了http-proxymiddleware（<a href="https://github.com/chimurai/http-proxy-middleware）" target="_blank" rel="noopener">https://github.com/chimurai/http-proxy-middleware）</a> ，它是http代理中间件，它依赖node.js， 基本原理是用服务端代理解决浏览器跨域：</em></p>
<a id="more"></a>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">// Template version: 1.2.4</span></span><br><span class="line"><span class="comment">// see http://vuejs-templates.github.io/webpack for documentation.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> proxyConfig = <span class="built_in">require</span>(<span class="string">'./proxyConfig'</span>)</span><br><span class="line"><span class="keyword">let</span> sysConfig = <span class="built_in">require</span>(<span class="string">'./sysConfig'</span>)</span><br><span class="line"><span class="keyword">let</span> xcApiUrl = sysConfig.xcApiUrl</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Paths</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line">    <span class="comment">//proxyTable: proxyConfig.proxyList,</span></span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      <span class="string">'/api/cms'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://localhost:31001'</span>,<span class="comment">//转发地址</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span><span class="comment">//将api去除</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//target: 'http://127.0.0.1:50201'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-dev-server</title>
    <url>/2020/02/16/webpack-dev-server/</url>
    <content><![CDATA[<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p><em>webpack-dev-server开发服务器，它的功能可以实现热加载 并且自动刷新浏览器</em></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>npm install webpack@3.6.0 webpack-dev-server@2.9.1 html-webpack-plugin@2.30.1 --save-dev </code></pre><a id="more"></a>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --inline --hot --open --port 5008"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^2.30.1"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^3.6.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^2.9.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用html-webpack-plugin插件，作用是根据html模板在内存生成html文件，它的工作原理是根据模板文件在内存中生成一个index.html文件。</span></span><br><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> htmlwp = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:<span class="string">'./src/main.js'</span>,  <span class="comment">//指定打包的入口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        path : __dirname+<span class="string">'/dist'</span>,  <span class="comment">// 注意：__dirname表示webpack.config.js所在目录的绝对路径</span></span><br><span class="line">        filename:<span class="string">'build.js'</span>		   <span class="comment">//输出文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> htmlwp(&#123;</span><br><span class="line">            title: <span class="string">'首页'</span>,  <span class="comment">//生成的页面标题&lt;head&gt;&lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line">            filename: <span class="string">'index.html'</span>, <span class="comment">//webpack-dev-server在内存中生成的文件名称，自动将build注入到这个页面底部，才能实现自动刷新功能</span></span><br><span class="line">            template: <span class="string">'vue_test01.html'</span> <span class="comment">//根据vue_test01.html这个模板来生成(这个文件请程序员自己生成)</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre><code>//在项目根目录下执行
npm run dev </code></pre><h2 id="debug调试"><a href="#debug调试" class="headerlink" title="debug调试"></a>debug调试</h2><ul>
<li>在webpack.conﬁg.js中配置：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devtool: <span class="string">'eval‐source‐map'</span>,</span><br></pre></td></tr></table></figure></li>
<li>在js中跟踪代码的位置上添加debugger</li>
</ul>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack实践</title>
    <url>/2020/02/16/webpack%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="Webpack介绍"><a href="#Webpack介绍" class="headerlink" title="Webpack介绍"></a>Webpack介绍</h2><p><em>Webpack 是一个前端资源的打包工具，它可以将js、image、css等资源当成一个模块进行打包。</em></p>
<p>功能：</p>
<ul>
<li>模块化开发<br>程序员在开发时可以分模块创建不同的js、 css等小文件方便开发，最后使用webpack将这些小文件打包成一个文 件，减少了http的请求次数。 webpack可以实现按需打包，为了避免出现打包文件过大可以打包成多个文件。</li>
<li>编译typescript、ES6等高级js语法<br>随着前端技术的强大，开发中可以使用javascript的很多高级版本，比如：typescript、ES6等，方便开发， webpack可以将打包文件转换成浏览器可识别的js语法。 </li>
<li>CSS预编译<br>webpack允许在开发中使用Sass 和 Less等原生CSS的扩展技术，通过sass-loader、less-loader将Sass 和 Less的 语法编译成浏览器可识别的css语法</li>
</ul>
<a id="more"></a>

<h2 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num1"</span>&gt;</span>+</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num2"</span>&gt;</span>=</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"change"</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Js代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//add.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.add = add</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> &#123;add&#125; =<span class="built_in">require</span>(<span class="string">"./add.js"</span>)</span><br><span class="line"><span class="keyword">var</span> Vue =<span class="built_in">require</span>(<span class="string">"./vue.min.js"</span>)</span><br><span class="line"><span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name:<span class="string">'vue.js测试用例'</span>,</span><br><span class="line">        num1:<span class="number">0</span>,</span><br><span class="line">        num2:<span class="number">0</span>,</span><br><span class="line">        result:<span class="number">0</span>,</span><br><span class="line">        url:<span class="string">"https://www.google.com.tw/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        change:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.result = add(<span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.num1) ,<span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.num2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><em>html中的build.js是webpack打包生成的，在终端下运行：</em></p>
<pre><code>webpack main.js build.js</code></pre>]]></content>
      <tags>
        <tag>Wehpack</tag>
      </tags>
  </entry>
  <entry>
    <title>vue.js入门</title>
    <url>/2020/02/16/vue-js%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="Vue是什么？"><a href="#Vue是什么？" class="headerlink" title="Vue是什么？"></a>Vue是什么？</h2><p><em>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计 为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一 方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 渐进式框架：Progressive，说明vue.js的轻量，是指一个前端项目可以使用vue.js一两个特性也可以整个项目都用 vue.js。<br>自底向上逐层应用：作为渐进式框架要实现的目标就是方便项目增量开发。</em></p>
<a id="more"></a>

<h2 id="vue-js有哪些功能？"><a href="#vue-js有哪些功能？" class="headerlink" title="vue.js有哪些功能？"></a>vue.js有哪些功能？</h2><ul>
<li>声明式渲染<br>  Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统。 比如：使用vue.js的插值表达式放在Dom的任意地方， 差值表达式的值将被渲染在Dom中。</li>
<li>条件与循环<br>  dom中可以使用vue.js提供的v-if、v-for等标签，方便对数据进行判断、循环。</li>
<li>双向数据绑定<br>  Vue 提供v-model 指令，它可以轻松实现Dom元素和数据对象之间双向绑定，即修改Dom元素中的值自动修改绑 定的数据对象，修改数据对象的值自动修改Dom元素中的值。 </li>
<li>处理用户输入<br>  为了让用户和你的应用进行交互，我们可以用 v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法。</li>
<li>组件化应用构建 vue.js可以定义一个一个的组件，在vue页面中引用组件，这个功能非常适合构建大型应用。</li>
</ul>
<h2 id="Vue入门程序"><a href="#Vue入门程序" class="headerlink" title="Vue入门程序"></a>Vue入门程序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;vue测试页面&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;a v-bind:href=<span class="string">"url"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" v-model="num1"&gt;+</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" v-model="num2"&gt;=</span></span><br><span class="line"><span class="regexp">    &lt;span v-text="result"&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">"change"</span>&gt;计算&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="vue.min.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> VM = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#app"</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name:<span class="string">'vue.js测试用例'</span>,</span><br><span class="line">            num1:<span class="number">0</span>,</span><br><span class="line">            num2:<span class="number">0</span>,</span><br><span class="line">            result:<span class="number">0</span>,</span><br><span class="line">            url:<span class="string">"https://www.google.com.tw/"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            change:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.result = <span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.num1) + <span class="built_in">Number</span>.parseInt(<span class="keyword">this</span>.num2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Python配合ffmpeg爬取视频</title>
    <url>/2020/02/09/Python%E9%85%8D%E5%90%88ffmpeg%E7%88%AC%E5%8F%96%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p><em>主要采用python配合ffmpeg对一些视频进行爬取，需要配置ffmpeg才能运行。</em></p>
<h2 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h2><a id="more"></a>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = input(<span class="string">"请输入你要解析的网址："</span>)</span><br><span class="line">url = <span class="string">"http://jx.618g.com/?url="</span> + url</span><br><span class="line"></span><br><span class="line">response = requests.get(url).text</span><br><span class="line">begin = response.find(<span class="string">"m3u8-dp.php?url="</span>) + len(<span class="string">"m3u8-dp.php?url="</span>)</span><br><span class="line">end = response.find(<span class="string">"index.m3u8"</span>) + len(<span class="string">"index.m3u8"</span>)</span><br><span class="line">print(begin, end)</span><br><span class="line"><span class="keyword">if</span> begin == len(<span class="string">"m3u8-dp.php?url="</span>) - <span class="number">1</span> <span class="keyword">or</span> end == len(<span class="string">"index.m3u8"</span>) - <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"对不起，该地址无法解析！！！"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"解析成功！！请在终端下运行下列代码：\n&#123;&#125;"</span>.format(<span class="string">"ffmpeg -i'&#123;&#125;' -vcode copy -acode copy xxx.mp4"</span>.format(response[begin:end])))</span><br></pre></td></tr></table></figure>

<h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i&#39;网址&#39; -vcode copy -acode copy xxx.mp4</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>有道翻译--爬虫</title>
    <url>/2020/02/05/%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91-%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p><em>使用requests, json实现的的一个简单的爬虫，爬取了有道翻译，可实现自动翻译的功能。</em></p>
<a id="more"></a>

<h2 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule"</span></span><br><span class="line">    text = input(<span class="string">"请输入你要翻译的类容："</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"i"</span>: text,</span><br><span class="line">        <span class="string">"from"</span>: <span class="string">"AUTO"</span>,</span><br><span class="line">        <span class="string">"to"</span>: <span class="string">"AUTO"</span>,</span><br><span class="line">        <span class="string">"smartresult"</span>: <span class="string">"dict"</span>,</span><br><span class="line">        <span class="string">"client"</span>: <span class="string">"fanyideskweb"</span>,</span><br><span class="line">        <span class="string">"salt"</span>: <span class="string">"15808669778406"</span>,</span><br><span class="line">        <span class="string">"sign"</span>: <span class="string">"cf9cad98bb3652ac19586c171eadc06e"</span>,</span><br><span class="line">        <span class="string">"ts"</span>: <span class="string">"1580866977840"</span>,</span><br><span class="line">        <span class="string">"bv"</span>: <span class="string">"901200199a98c590144a961dac532964"</span>,</span><br><span class="line">        <span class="string">"doctype"</span>: <span class="string">"json"</span>,</span><br><span class="line">        <span class="string">"version"</span>: <span class="string">"2.1"</span>,</span><br><span class="line">        <span class="string">"keyfrom"</span>: <span class="string">"fanyi.web"</span>,</span><br><span class="line">        <span class="string">"action"</span>: <span class="string">"FY_BY_REALTlME"</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = json.loads(requests.post(url, data, headers).text)</span><br><span class="line">    print(response[<span class="string">"translateResult"</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">"tgt"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       translate()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Pyhton</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现简单的通信协议</title>
    <url>/2020/02/01/Python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p><em>使用socket实现的的一个简单的自定义协议，模拟实现了QQ的小部分功能。其中涉及到json的使用，以及多线程的创建等等。</em></p>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul>
<li>多用户连接</li>
<li>即时通讯</li>
<li>登陆，退出</li>
<li>历史消息</li>
</ul>
<a id="more"></a>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect((<span class="string">"192.168.0.101"</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">user = <span class="string">"Linn"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆</span></span><br><span class="line">login_template = &#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"login"</span>,</span><br><span class="line">    <span class="string">"user"</span>: user</span><br><span class="line">&#125;</span><br><span class="line">client.send(json.dumps(login_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取在线用户</span></span><br><span class="line">get_user_template = &#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"list_user"</span></span><br><span class="line">&#125;</span><br><span class="line">client.send(json.dumps(get_user_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(<span class="string">"当前在线用户：&#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取历史消息</span></span><br><span class="line">offline_msg_template =&#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"history_msg"</span>,</span><br><span class="line">    <span class="string">"user"</span>: user,</span><br><span class="line">&#125;</span><br><span class="line">client.send(json.dumps(offline_msg_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(<span class="string">"历史消息：&#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line"></span><br><span class="line">Exit = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_send</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 随时能收到消息， 随时能发送消息</span></span><br><span class="line">        op_type = input(<span class="string">"请你选择你需要的操作：1.发送消息 2.退出 3.获取在线用户:  "</span>)</span><br><span class="line">        <span class="keyword">if</span> op_type <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>] :</span><br><span class="line">            print(<span class="string">"不支持该操作！！！"</span>)</span><br><span class="line">            <span class="comment"># op_type = input("请你选择你需要的操作：1.发送消息 2.推出 3.获取在线用户")</span></span><br><span class="line">        <span class="keyword">elif</span> op_type == <span class="string">"1"</span>:</span><br><span class="line">            to_user = input(<span class="string">"请输入你要发送消息的用户:  "</span>)</span><br><span class="line">            msg = input(<span class="string">"请输入你要发送的消息:  "</span>)</span><br><span class="line">            send_data_template = &#123;</span><br><span class="line">                <span class="string">"action"</span> : <span class="string">"send_msg"</span>,</span><br><span class="line">                <span class="string">"to"</span>: to_user,</span><br><span class="line">                <span class="string">"from"</span>: user,</span><br><span class="line">                <span class="string">"data"</span>: msg</span><br><span class="line">            &#125;</span><br><span class="line">            client.send(json.dumps(send_data_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> op_type == <span class="string">"2"</span>:</span><br><span class="line">            exit_template = &#123;</span><br><span class="line">                <span class="string">"action"</span>: <span class="string">"list_user"</span>,</span><br><span class="line">                <span class="string">"user"</span>: user</span><br><span class="line">            &#125;</span><br><span class="line">            client.send(json.dumps(exit_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line">            Exit = <span class="literal">True</span></span><br><span class="line">            client.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> op_type == <span class="string">"3"</span>:</span><br><span class="line">            get_user_template = &#123;</span><br><span class="line">                <span class="string">"action"</span>: <span class="string">"list_user"</span></span><br><span class="line">            &#125;</span><br><span class="line">            client.send(json.dumps(get_user_template).encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_recv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 处理接收请求</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Exit:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            res_json = json.loads(res)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                msg = res_json[<span class="string">"data"</span>]</span><br><span class="line">                from_user = res_json[<span class="string">"from"</span>]</span><br><span class="line">                print(<span class="string">"\n收到来自&#123;&#125;得消息：&#123;&#125;"</span>.format(from_user, msg))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">""</span>)</span><br><span class="line">                print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    threading.Thread(target=handle_recv).start()</span><br><span class="line">    threading.Thread(target=handle_send).start()</span><br></pre></td></tr></table></figure>

<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 维护用户连接</span></span><br><span class="line">online_user = defaultdict(dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 维护用户历史消息</span></span><br><span class="line">user_msg = defaultdict(list)</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定ip，端口</span></span><br><span class="line">server.bind((<span class="string">'0.0.0.0'</span>, <span class="number">8000</span>))</span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hand_socket</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        json_data = json.loads(data.decode(<span class="string">"utf8"</span>))</span><br><span class="line">        action = json_data.get(<span class="string">"action"</span>, <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">"login"</span>:</span><br><span class="line">            online_user[json_data[<span class="string">"user"</span>]] = sock</span><br><span class="line">            sock.send(<span class="string">"登陆成功！"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"list_user"</span>:</span><br><span class="line">            <span class="comment"># 获取当前用户</span></span><br><span class="line">            all_users = [user <span class="keyword">for</span> user, sock <span class="keyword">in</span> online_user.items()]</span><br><span class="line">            sock.send(json.dumps(all_users).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"history_msg"</span>:</span><br><span class="line">            sock.send(json.dumps(user_msg.get(json_data[<span class="string">"user"</span>], [])).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"send_msg"</span>:</span><br><span class="line">            <span class="keyword">if</span> json_data[<span class="string">"to"</span>] <span class="keyword">in</span> online_user:</span><br><span class="line">                online_user[json_data[<span class="string">"to"</span>]].send(json.dumps(json_data).encode(<span class="string">"utf8"</span>))</span><br><span class="line">            user_msg[json_data[<span class="string">"to"</span>]].append(json_data)</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">"exits"</span>:</span><br><span class="line">            <span class="keyword">del</span> online_user[json_data[<span class="string">"user"</span>]]</span><br><span class="line">            sock.send(<span class="string">"退出成功!"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 阻塞等待连接</span></span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line">    <span class="comment"># 启动线程，用于用户连接</span></span><br><span class="line">    threading.Thread(target=hand_socket, args=(sock, addr)).start()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python关于socket编程</title>
    <url>/2020/01/29/Python%E5%85%B3%E4%BA%8Esocket%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p><em>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。采用python实现了简单了服务器与客户端的交互。</em></p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定区域网内都可以链接</span></span><br><span class="line">server.bind((<span class="string">'0.0.0.0'</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听</span></span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handl_sock</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    sock.send(<span class="string">"welcome to server!"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">    print(<span class="string">"Client request : &#123;&#125;"</span>.format(sock.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"Client request : &#123;&#125;"</span>.format(sock.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line">        input_data = input()</span><br><span class="line">        sock.send(input_data.encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 该方法会组赛等待</span></span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多线程，完成多链接</span></span><br><span class="line">    client_thread = threading.Thread(target=handl_sock, args=(sock, addr))</span><br><span class="line">    client_thread.start()</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器ip地址</span></span><br><span class="line">client.connect((<span class="string">'192.168.0.101'</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">client.send(<span class="string">"welcome to client"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">print(<span class="string">"Server response : &#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    input_data = input()</span><br><span class="line">    client.send(input_data.encode(<span class="string">"utf8"</span>))</span><br><span class="line">    print(<span class="string">"Server response : &#123;&#125;"</span>.format(client.recv(<span class="number">1024</span>).decode(<span class="string">"utf8"</span>)))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos2d-creator</title>
    <url>/2020/01/21/cocos2d-creator/</url>
    <content><![CDATA[<p><em>这是我近期学习cocos2d_creator的收获，主要是关于js脚本编写。</em></p>
<a id="more"></a>

<h2 id="场景切换"><a href="#场景切换" class="headerlink" title="场景切换"></a>场景切换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">scenesChangesMS</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            cc.director.loadScene(<span class="string">"main_scenes"</span>);<span class="comment">//场景切换函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.node.on(cc.Node.EventType.TOUCH_END,scenesChangesMS,<span class="keyword">this</span>);<span class="comment">//打开触摸事件监控,on方法会给my_func方法传递一个TONCH类型的参数</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="触摸事件监控"><a href="#触摸事件监控" class="headerlink" title="触摸事件监控"></a>触摸事件监控</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_func1</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"触摸开始！！！"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(t.getLocation());</span><br><span class="line">            <span class="comment">//this.node.off(cc.Node.EventType.TOUCH_START,my_func,this);//关闭触摸事件监控</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_func2</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"触摸移动！！！"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(t.getLocation());</span><br><span class="line">            <span class="keyword">this</span>.node.x += t.getDelta().x;</span><br><span class="line">            <span class="keyword">this</span>.node.y += t.getDelta().y;</span><br><span class="line">            <span class="comment">//t.stopPropagationImmediate();</span></span><br><span class="line">            <span class="comment">//this.node.off(cc.Node.EventType.TOUCH_START,my_func,this);//关闭触摸事件监控</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.node.on(cc.Node.EventType.TOUCH_START,my_func1,<span class="keyword">this</span>);<span class="comment">//打开触摸事件监控,on方法会给my_func方法传递一个TONCH类型的参数</span></span><br><span class="line">        <span class="keyword">this</span>.node.on(cc.Node.EventType.TOUCH_MOVE,my_func2,<span class="keyword">this</span>);<span class="comment">//打开触摸移动事件监控</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="键盘事件监控"><a href="#键盘事件监控" class="headerlink" title="键盘事件监控"></a>键盘事件监控</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN,my_KEY_DOWN,<span class="keyword">this</span>);</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP,my_KEY_UP,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.node.on(<span class="string">"user_page"</span>,my_page,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_page</span>(<span class="params">e</span>) </span>&#123;<span class="comment">//e为派送函数传递过来的 表形参</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"自定义事件触发"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.node.name);</span><br><span class="line">            <span class="built_in">console</span>.log(e.detail);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_KEY_DOWN</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(event.keyCode)&#123;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.space :</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"space"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.w :</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"w"</span>);</span><br><span class="line">                    <span class="keyword">this</span>.node.y += <span class="number">10</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.s :</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"s"</span>);</span><br><span class="line">                    <span class="keyword">this</span>.node.y -= <span class="number">10</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">my_KEY_UP</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(event.keyCode)&#123;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.space :</span><br><span class="line">                    <span class="comment">//this.node.emit("user_page",&#123;name : "张三" , sex : "男" &#125;);</span></span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> cc.Event.EventCustom(<span class="string">"user_page"</span>);</span><br><span class="line">                    e.detail = &#123;<span class="attr">name</span> : <span class="string">"张三"</span> , <span class="attr">sex</span> : <span class="string">"男"</span>&#125;;</span><br><span class="line">                    <span class="keyword">this</span>.node.dispatchEvent(e,<span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.w :</span><br><span class="line">                    <span class="comment">//this.node.emit("user_page",&#123;name : "李四" , sex : "男"&#125;);</span></span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> cc.Event.EventCustom(<span class="string">"user_page"</span>);</span><br><span class="line">                    e.detail = &#123;<span class="attr">name</span> : <span class="string">"李四"</span> , <span class="attr">sex</span> : <span class="string">"男"</span>&#125;;</span><br><span class="line">                    <span class="keyword">this</span>.node.dispatchEvent(e,<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> cc.KEY.s :</span><br><span class="line">                    <span class="keyword">this</span>.node.emit(<span class="string">"user_page"</span>,&#123;<span class="attr">name</span> : <span class="string">"王五"</span> , <span class="attr">sex</span> : <span class="string">"男"</span>&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
